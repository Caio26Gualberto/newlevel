/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  Pagination,
  PhotoResponseDtoGenericListNewLevelResponse,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    PaginationFromJSON,
    PaginationToJSON,
    PhotoResponseDtoGenericListNewLevelResponseFromJSON,
    PhotoResponseDtoGenericListNewLevelResponseToJSON,
} from '../models/index';

export interface ApiPhotoApprovePhotoGetRequest {
    photoId?: number;
    isApprove?: boolean;
}

export interface ApiPhotoGetAllPhotosPostRequest {
    pagination?: Pagination;
}

export interface ApiPhotoGetPhotoToApprovePostRequest {
    pagination?: Pagination;
}

export interface ApiPhotoUploadPhotoPostRequest {
    title?: string;
    subtitle?: string;
    description?: string;
    takeAt?: string;
    file?: Blob;
}

/**
 * 
 */
export class PhotoApi extends runtime.BaseAPI {

    /**
     */
    async apiPhotoApprovePhotoGetRaw(requestParameters: ApiPhotoApprovePhotoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['photoId'] != null) {
            queryParameters['photoId'] = requestParameters['photoId'];
        }

        if (requestParameters['isApprove'] != null) {
            queryParameters['isApprove'] = requestParameters['isApprove'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Photo/ApprovePhoto`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoApprovePhotoGet(requestParameters: ApiPhotoApprovePhotoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiPhotoApprovePhotoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoGetAllPhotosPostRaw(requestParameters: ApiPhotoGetAllPhotosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Photo/GetAllPhotos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoResponseDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoGetAllPhotosPost(requestParameters: ApiPhotoGetAllPhotosPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse> {
        const response = await this.apiPhotoGetAllPhotosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoGetPhotoToApprovePostRaw(requestParameters: ApiPhotoGetPhotoToApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Photo/GetPhotoToApprove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoResponseDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoGetPhotoToApprovePost(requestParameters: ApiPhotoGetPhotoToApprovePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse> {
        const response = await this.apiPhotoGetPhotoToApprovePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoUploadPhotoPostRaw(requestParameters: ApiPhotoUploadPhotoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('Title', requestParameters['title'] as any);
        }

        if (requestParameters['subtitle'] != null) {
            formParams.append('Subtitle', requestParameters['subtitle'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('Description', requestParameters['description'] as any);
        }

        if (requestParameters['takeAt'] != null) {
            formParams.append('TakeAt', requestParameters['takeAt'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/Photo/UploadPhoto`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoUploadPhotoPost(requestParameters: ApiPhotoUploadPhotoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiPhotoUploadPhotoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
