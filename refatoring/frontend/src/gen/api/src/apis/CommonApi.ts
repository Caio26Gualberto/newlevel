/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGitIssueInput,
  SelectOptionDtoListNewLevelResponse,
  StringNewLevelResponse,
} from '../models/index';
import {
    CreateGitIssueInputFromJSON,
    CreateGitIssueInputToJSON,
    SelectOptionDtoListNewLevelResponseFromJSON,
    SelectOptionDtoListNewLevelResponseToJSON,
    StringNewLevelResponseFromJSON,
    StringNewLevelResponseToJSON,
} from '../models/index';

export interface ApiCommonCreateIssuePostRequest {
    createGitIssueInput?: CreateGitIssueInput;
}

/**
 * 
 */
export class CommonApi extends runtime.BaseAPI {

    /**
     */
    async apiCommonCreateIssuePostRaw(requestParameters: ApiCommonCreateIssuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Common/CreateIssue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGitIssueInputToJSON(requestParameters['createGitIssueInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonCreateIssuePost(requestParameters: ApiCommonCreateIssuePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiCommonCreateIssuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonGetDisplayCitiesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectOptionDtoListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Common/GetDisplayCities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectOptionDtoListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonGetDisplayCitiesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectOptionDtoListNewLevelResponse> {
        const response = await this.apiCommonGetDisplayCitiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonGetDisplayGitLabelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectOptionDtoListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Common/GetDisplayGitLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectOptionDtoListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonGetDisplayGitLabelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectOptionDtoListNewLevelResponse> {
        const response = await this.apiCommonGetDisplayGitLabelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonGetDisplayMusicGenresGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SelectOptionDtoListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Common/GetDisplayMusicGenres`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectOptionDtoListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonGetDisplayMusicGenresGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SelectOptionDtoListNewLevelResponse> {
        const response = await this.apiCommonGetDisplayMusicGenresGetRaw(initOverrides);
        return await response.value();
    }

}
