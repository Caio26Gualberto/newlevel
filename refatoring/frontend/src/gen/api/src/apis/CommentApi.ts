/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  CommentsPhotoResponseDtoNewLevelResponse,
  Pagination,
  ReceiveCommentDto,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    CommentsPhotoResponseDtoNewLevelResponseFromJSON,
    CommentsPhotoResponseDtoNewLevelResponseToJSON,
    PaginationFromJSON,
    PaginationToJSON,
    ReceiveCommentDtoFromJSON,
    ReceiveCommentDtoToJSON,
} from '../models/index';

export interface ApiCommentGetCommentsByMediaIdPostRequest {
    mediaId?: number;
    pagination?: Pagination;
}

export interface ApiCommentGetCommentsByPhotoIdPostRequest {
    photoId?: number;
    pagination?: Pagination;
}

export interface ApiCommentSaveCommentPostRequest {
    receiveCommentDto?: ReceiveCommentDto;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     */
    async apiCommentGetCommentsByMediaIdPostRaw(requestParameters: ApiCommentGetCommentsByMediaIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['mediaId'] != null) {
            queryParameters['mediaId'] = requestParameters['mediaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/GetCommentsByMediaId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPhotoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetCommentsByMediaIdPost(requestParameters: ApiCommentGetCommentsByMediaIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse> {
        const response = await this.apiCommentGetCommentsByMediaIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentGetCommentsByPhotoIdPostRaw(requestParameters: ApiCommentGetCommentsByPhotoIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['photoId'] != null) {
            queryParameters['photoId'] = requestParameters['photoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/GetCommentsByPhotoId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPhotoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetCommentsByPhotoIdPost(requestParameters: ApiCommentGetCommentsByPhotoIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse> {
        const response = await this.apiCommentGetCommentsByPhotoIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentSaveCommentPostRaw(requestParameters: ApiCommentSaveCommentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/SaveComment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReceiveCommentDtoToJSON(requestParameters['receiveCommentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentSaveCommentPost(requestParameters: ApiCommentSaveCommentPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiCommentSaveCommentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
