/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  MediaByUserIdDtoGenericListNewLevelResponse,
  MediaDtoGenericListNewLevelResponse,
  Pagination,
  RequestMediaDto,
  UpdateMediaByIdInput,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    MediaByUserIdDtoGenericListNewLevelResponseFromJSON,
    MediaByUserIdDtoGenericListNewLevelResponseToJSON,
    MediaDtoGenericListNewLevelResponseFromJSON,
    MediaDtoGenericListNewLevelResponseToJSON,
    PaginationFromJSON,
    PaginationToJSON,
    RequestMediaDtoFromJSON,
    RequestMediaDtoToJSON,
    UpdateMediaByIdInputFromJSON,
    UpdateMediaByIdInputToJSON,
} from '../models/index';

export interface ApiMediaApproveMediaGetRequest {
    mediaId?: number;
    isApprove?: boolean;
}

export interface ApiMediaDeleteMediaByIdPostRequest {
    id?: number;
}

export interface ApiMediaGetMediaPostRequest {
    pagination?: Pagination;
}

export interface ApiMediaGetMediaToApprovePostRequest {
    pagination?: Pagination;
}

export interface ApiMediaGetMediasByUserIdPostRequest {
    pagination?: Pagination;
}

export interface ApiMediaRequestMediaPostRequest {
    requestMediaDto?: RequestMediaDto;
}

export interface ApiMediaUpdateMediaByIdPostRequest {
    updateMediaByIdInput?: UpdateMediaByIdInput;
}

/**
 * MediaApi - interface
 * 
 * @export
 * @interface MediaApiInterface
 */
export interface MediaApiInterface {
    /**
     * 
     * @param {number} [mediaId] 
     * @param {boolean} [isApprove] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaApproveMediaGetRaw(requestParameters: ApiMediaApproveMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaApproveMediaGet(requestParameters: ApiMediaApproveMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaDeleteMediaByIdPostRaw(requestParameters: ApiMediaDeleteMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaDeleteMediaByIdPost(requestParameters: ApiMediaDeleteMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {Pagination} [pagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediaPostRaw(requestParameters: ApiMediaGetMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediaPost(requestParameters: ApiMediaGetMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {Pagination} [pagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediaToApprovePostRaw(requestParameters: ApiMediaGetMediaToApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediaToApprovePost(requestParameters: ApiMediaGetMediaToApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {Pagination} [pagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediasByUserIdPostRaw(requestParameters: ApiMediaGetMediasByUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaByUserIdDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediasByUserIdPost(requestParameters: ApiMediaGetMediasByUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaByUserIdDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {RequestMediaDto} [requestMediaDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaRequestMediaPostRaw(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaRequestMediaPost(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {UpdateMediaByIdInput} [updateMediaByIdInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaUpdateMediaByIdPostRaw(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaUpdateMediaByIdPost(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI implements MediaApiInterface {

    /**
     */
    async apiMediaApproveMediaGetRaw(requestParameters: ApiMediaApproveMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['mediaId'] != null) {
            queryParameters['mediaId'] = requestParameters['mediaId'];
        }

        if (requestParameters['isApprove'] != null) {
            queryParameters['isApprove'] = requestParameters['isApprove'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/ApproveMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaApproveMediaGet(requestParameters: ApiMediaApproveMediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaApproveMediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaDeleteMediaByIdPostRaw(requestParameters: ApiMediaDeleteMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/DeleteMediaById`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaDeleteMediaByIdPost(requestParameters: ApiMediaDeleteMediaByIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaDeleteMediaByIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediaPostRaw(requestParameters: ApiMediaGetMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediaPost(requestParameters: ApiMediaGetMediaPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediaToApprovePostRaw(requestParameters: ApiMediaGetMediaToApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMediaToApprove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediaToApprovePost(requestParameters: ApiMediaGetMediaToApprovePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediaToApprovePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediasByUserIdPostRaw(requestParameters: ApiMediaGetMediasByUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaByUserIdDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMediasByUserId`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaByUserIdDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediasByUserIdPost(requestParameters: ApiMediaGetMediasByUserIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaByUserIdDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediasByUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaRequestMediaPostRaw(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/RequestMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMediaDtoToJSON(requestParameters['requestMediaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaRequestMediaPost(requestParameters: ApiMediaRequestMediaPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaRequestMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaUpdateMediaByIdPostRaw(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/UpdateMediaById`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMediaByIdInputToJSON(requestParameters['updateMediaByIdInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaUpdateMediaByIdPost(requestParameters: ApiMediaUpdateMediaByIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaUpdateMediaByIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
