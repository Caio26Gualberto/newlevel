/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApproveMediaInput,
  BooleanNewLevelResponse,
  MediaByUserIdDtoGenericListNewLevelResponse,
  MediaDtoGenericListNewLevelResponse,
  UpdateMediaByIdInput,
} from '../models/index';
import {
    ApproveMediaInputFromJSON,
    ApproveMediaInputToJSON,
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    MediaByUserIdDtoGenericListNewLevelResponseFromJSON,
    MediaByUserIdDtoGenericListNewLevelResponseToJSON,
    MediaDtoGenericListNewLevelResponseFromJSON,
    MediaDtoGenericListNewLevelResponseToJSON,
    UpdateMediaByIdInputFromJSON,
    UpdateMediaByIdInputToJSON,
} from '../models/index';

export interface ApiMediaApproveMediaPatchRequest {
    approveMediaInput?: ApproveMediaInput;
}

export interface ApiMediaDeleteMediaByIdDeleteRequest {
    id?: number;
}

export interface ApiMediaGetMediaGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
}

export interface ApiMediaGetMediaToApproveGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
}

export interface ApiMediaGetMediasByUserIdGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
}

export interface ApiMediaRequestMediaPostRequest {
    src?: string;
    title?: string;
    description?: string;
    file?: Blob;
}

export interface ApiMediaUpdateMediaByIdPostRequest {
    updateMediaByIdInput?: UpdateMediaByIdInput;
}

/**
 * MediaApi - interface
 * 
 * @export
 * @interface MediaApiInterface
 */
export interface MediaApiInterface {
    /**
     * 
     * @param {ApproveMediaInput} [approveMediaInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaApproveMediaPatchRaw(requestParameters: ApiMediaApproveMediaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaApproveMediaPatch(requestParameters: ApiMediaApproveMediaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaDeleteMediaByIdDeleteRaw(requestParameters: ApiMediaDeleteMediaByIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaDeleteMediaByIdDelete(requestParameters: ApiMediaDeleteMediaByIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediaGetRaw(requestParameters: ApiMediaGetMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediaGet(requestParameters: ApiMediaGetMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediaToApproveGetRaw(requestParameters: ApiMediaGetMediaToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediaToApproveGet(requestParameters: ApiMediaGetMediaToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaGetMediasByUserIdGetRaw(requestParameters: ApiMediaGetMediasByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaByUserIdDtoGenericListNewLevelResponse>>;

    /**
     */
    apiMediaGetMediasByUserIdGet(requestParameters: ApiMediaGetMediasByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaByUserIdDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {string} [src] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaRequestMediaPostRaw(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaRequestMediaPost(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {UpdateMediaByIdInput} [updateMediaByIdInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    apiMediaUpdateMediaByIdPostRaw(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiMediaUpdateMediaByIdPost(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI implements MediaApiInterface {

    /**
     */
    async apiMediaApproveMediaPatchRaw(requestParameters: ApiMediaApproveMediaPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/ApproveMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveMediaInputToJSON(requestParameters['approveMediaInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaApproveMediaPatch(requestParameters: ApiMediaApproveMediaPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaApproveMediaPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaDeleteMediaByIdDeleteRaw(requestParameters: ApiMediaDeleteMediaByIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/DeleteMediaById`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaDeleteMediaByIdDelete(requestParameters: ApiMediaDeleteMediaByIdDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaDeleteMediaByIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediaGetRaw(requestParameters: ApiMediaGetMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediaGet(requestParameters: ApiMediaGetMediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediaToApproveGetRaw(requestParameters: ApiMediaGetMediaToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMediaToApprove`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediaToApproveGet(requestParameters: ApiMediaGetMediaToApproveGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediaToApproveGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaGetMediasByUserIdGetRaw(requestParameters: ApiMediaGetMediasByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaByUserIdDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/GetMediasByUserId`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaByUserIdDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaGetMediasByUserIdGet(requestParameters: ApiMediaGetMediasByUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaByUserIdDtoGenericListNewLevelResponse> {
        const response = await this.apiMediaGetMediasByUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaRequestMediaPostRaw(requestParameters: ApiMediaRequestMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['src'] != null) {
            queryParameters['Src'] = requestParameters['src'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['Title'] = requestParameters['title'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['Description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }


        let urlPath = `/api/Media/RequestMedia`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaRequestMediaPost(requestParameters: ApiMediaRequestMediaPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaRequestMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMediaUpdateMediaByIdPostRaw(requestParameters: ApiMediaUpdateMediaByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Media/UpdateMediaById`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMediaByIdInputToJSON(requestParameters['updateMediaByIdInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaUpdateMediaByIdPost(requestParameters: ApiMediaUpdateMediaByIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiMediaUpdateMediaByIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
