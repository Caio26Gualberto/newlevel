/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  PhotoResponseDtoGenericListNewLevelResponse,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    PhotoResponseDtoGenericListNewLevelResponseFromJSON,
    PhotoResponseDtoGenericListNewLevelResponseToJSON,
} from '../models/index';

export interface ApiPhotoApprovePhotoPatchRequest {
    photoId?: number;
    isApprove?: boolean;
}

export interface ApiPhotoGetAllPhotosGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
}

export interface ApiPhotoGetPhotoToApproveGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
}

export interface ApiPhotoUploadPhotoPostRequest {
    title?: string;
    subtitle?: string;
    description?: string;
    takeAt?: string;
    file?: Blob;
}

/**
 * PhotoApi - interface
 * 
 * @export
 * @interface PhotoApiInterface
 */
export interface PhotoApiInterface {
    /**
     * 
     * @param {number} [photoId] 
     * @param {boolean} [isApprove] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApiInterface
     */
    apiPhotoApprovePhotoPatchRaw(requestParameters: ApiPhotoApprovePhotoPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiPhotoApprovePhotoPatch(requestParameters: ApiPhotoApprovePhotoPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApiInterface
     */
    apiPhotoGetAllPhotosGetRaw(requestParameters: ApiPhotoGetAllPhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>>;

    /**
     */
    apiPhotoGetAllPhotosGet(requestParameters: ApiPhotoGetAllPhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApiInterface
     */
    apiPhotoGetPhotoToApproveGetRaw(requestParameters: ApiPhotoGetPhotoToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>>;

    /**
     */
    apiPhotoGetPhotoToApproveGet(requestParameters: ApiPhotoGetPhotoToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {string} [title] 
     * @param {string} [subtitle] 
     * @param {string} [description] 
     * @param {string} [takeAt] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApiInterface
     */
    apiPhotoUploadPhotoPostRaw(requestParameters: ApiPhotoUploadPhotoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiPhotoUploadPhotoPost(requestParameters: ApiPhotoUploadPhotoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

}

/**
 * 
 */
export class PhotoApi extends runtime.BaseAPI implements PhotoApiInterface {

    /**
     */
    async apiPhotoApprovePhotoPatchRaw(requestParameters: ApiPhotoApprovePhotoPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['photoId'] != null) {
            queryParameters['photoId'] = requestParameters['photoId'];
        }

        if (requestParameters['isApprove'] != null) {
            queryParameters['isApprove'] = requestParameters['isApprove'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Photo/ApprovePhoto`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoApprovePhotoPatch(requestParameters: ApiPhotoApprovePhotoPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiPhotoApprovePhotoPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoGetAllPhotosGetRaw(requestParameters: ApiPhotoGetAllPhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Photo/GetAllPhotos`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoResponseDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoGetAllPhotosGet(requestParameters: ApiPhotoGetAllPhotosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse> {
        const response = await this.apiPhotoGetAllPhotosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoGetPhotoToApproveGetRaw(requestParameters: ApiPhotoGetPhotoToApproveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoResponseDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Photo/GetPhotoToApprove`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoResponseDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoGetPhotoToApproveGet(requestParameters: ApiPhotoGetPhotoToApproveGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoResponseDtoGenericListNewLevelResponse> {
        const response = await this.apiPhotoGetPhotoToApproveGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPhotoUploadPhotoPostRaw(requestParameters: ApiPhotoUploadPhotoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['title'] != null) {
            formParams.append('Title', requestParameters['title'] as any);
        }

        if (requestParameters['subtitle'] != null) {
            formParams.append('Subtitle', requestParameters['subtitle'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('Description', requestParameters['description'] as any);
        }

        if (requestParameters['takeAt'] != null) {
            formParams.append('TakeAt', requestParameters['takeAt'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }


        let urlPath = `/api/Photo/UploadPhoto`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPhotoUploadPhotoPost(requestParameters: ApiPhotoUploadPhotoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiPhotoUploadPhotoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
