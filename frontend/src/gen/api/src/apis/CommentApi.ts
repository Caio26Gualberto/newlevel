/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  CommentsPhotoResponseDtoNewLevelResponse,
  ReceiveCommentDto,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    CommentsPhotoResponseDtoNewLevelResponseFromJSON,
    CommentsPhotoResponseDtoNewLevelResponseToJSON,
    ReceiveCommentDtoFromJSON,
    ReceiveCommentDtoToJSON,
} from '../models/index';

export interface ApiCommentGetCommentsByEventIdGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
    eventId?: number;
}

export interface ApiCommentGetCommentsByMediaIdGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
    mediaId?: number;
}

export interface ApiCommentGetCommentsByPhotoIdGetRequest {
    page?: number;
    pageSize?: number;
    totalItems?: number;
    pageCount?: number;
    search?: string;
    photoId?: number;
}

export interface ApiCommentSaveCommentPostRequest {
    receiveCommentDto?: ReceiveCommentDto;
}

/**
 * CommentApi - interface
 * 
 * @export
 * @interface CommentApiInterface
 */
export interface CommentApiInterface {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {number} [eventId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    apiCommentGetCommentsByEventIdGetRaw(requestParameters: ApiCommentGetCommentsByEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>>;

    /**
     */
    apiCommentGetCommentsByEventIdGet(requestParameters: ApiCommentGetCommentsByEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {number} [mediaId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    apiCommentGetCommentsByMediaIdGetRaw(requestParameters: ApiCommentGetCommentsByMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>>;

    /**
     */
    apiCommentGetCommentsByMediaIdGet(requestParameters: ApiCommentGetCommentsByMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [totalItems] 
     * @param {number} [pageCount] 
     * @param {string} [search] 
     * @param {number} [photoId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    apiCommentGetCommentsByPhotoIdGetRaw(requestParameters: ApiCommentGetCommentsByPhotoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>>;

    /**
     */
    apiCommentGetCommentsByPhotoIdGet(requestParameters: ApiCommentGetCommentsByPhotoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse>;

    /**
     * 
     * @param {ReceiveCommentDto} [receiveCommentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    apiCommentSaveCommentPostRaw(requestParameters: ApiCommentSaveCommentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiCommentSaveCommentPost(requestParameters: ApiCommentSaveCommentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI implements CommentApiInterface {

    /**
     */
    async apiCommentGetCommentsByEventIdGetRaw(requestParameters: ApiCommentGetCommentsByEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['eventId'] != null) {
            queryParameters['eventId'] = requestParameters['eventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Comment/GetCommentsByEventId`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPhotoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetCommentsByEventIdGet(requestParameters: ApiCommentGetCommentsByEventIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse> {
        const response = await this.apiCommentGetCommentsByEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentGetCommentsByMediaIdGetRaw(requestParameters: ApiCommentGetCommentsByMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['mediaId'] != null) {
            queryParameters['mediaId'] = requestParameters['mediaId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Comment/GetCommentsByMediaId`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPhotoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetCommentsByMediaIdGet(requestParameters: ApiCommentGetCommentsByMediaIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse> {
        const response = await this.apiCommentGetCommentsByMediaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentGetCommentsByPhotoIdGetRaw(requestParameters: ApiCommentGetCommentsByPhotoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPhotoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['totalItems'] != null) {
            queryParameters['TotalItems'] = requestParameters['totalItems'];
        }

        if (requestParameters['pageCount'] != null) {
            queryParameters['PageCount'] = requestParameters['pageCount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['photoId'] != null) {
            queryParameters['photoId'] = requestParameters['photoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Comment/GetCommentsByPhotoId`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPhotoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetCommentsByPhotoIdGet(requestParameters: ApiCommentGetCommentsByPhotoIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPhotoResponseDtoNewLevelResponse> {
        const response = await this.apiCommentGetCommentsByPhotoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentSaveCommentPostRaw(requestParameters: ApiCommentSaveCommentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Comment/SaveComment`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReceiveCommentDtoToJSON(requestParameters['receiveCommentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentSaveCommentPost(requestParameters: ApiCommentSaveCommentPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiCommentSaveCommentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
