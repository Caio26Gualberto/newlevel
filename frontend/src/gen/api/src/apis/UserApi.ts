/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  EActivityLocation,
  InviteMemberInput,
  ProfileInfoDtoNewLevelResponse,
  SearchBarUserDetailDtoListNewLevelResponse,
  StringNewLevelResponse,
  UserInfoResponseDtoNewLevelResponse,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    EActivityLocationFromJSON,
    EActivityLocationToJSON,
    InviteMemberInputFromJSON,
    InviteMemberInputToJSON,
    ProfileInfoDtoNewLevelResponseFromJSON,
    ProfileInfoDtoNewLevelResponseToJSON,
    SearchBarUserDetailDtoListNewLevelResponseFromJSON,
    SearchBarUserDetailDtoListNewLevelResponseToJSON,
    StringNewLevelResponseFromJSON,
    StringNewLevelResponseToJSON,
    UserInfoResponseDtoNewLevelResponseFromJSON,
    UserInfoResponseDtoNewLevelResponseToJSON,
} from '../models/index';

export interface ApiUserDeleteInviteMemberDeleteRequest {
    nickname?: string;
}

export interface ApiUserGetProfileGetRequest {
    nickname?: string;
    userId?: number;
}

export interface ApiUserGetUsersForSearchBarGetRequest {
    searchTerm?: string;
}

export interface ApiUserInviteMemberBandPostRequest {
    inviteMemberInput?: InviteMemberInput;
}

export interface ApiUserUpdateUserPutRequest {
    email?: string;
    nickname?: string;
    activityLocation?: EActivityLocation;
    file?: Blob;
}

export interface ApiUserUploadAvatarImagePostRequest {
    position?: number;
    file?: Blob;
}

export interface ApiUserUploadBannerImagePostRequest {
    file?: Blob;
    position?: number;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserChangePasswordPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiUserChangePasswordPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserDeleteDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiUserDeleteDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {string} [nickname] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserDeleteInviteMemberDeleteRaw(requestParameters: ApiUserDeleteInviteMemberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiUserDeleteInviteMemberDelete(requestParameters: ApiUserDeleteInviteMemberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {string} [nickname] 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserGetProfileGetRaw(requestParameters: ApiUserGetProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileInfoDtoNewLevelResponse>>;

    /**
     */
    apiUserGetProfileGet(requestParameters: ApiUserGetProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileInfoDtoNewLevelResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserGetUserInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoResponseDtoNewLevelResponse>>;

    /**
     */
    apiUserGetUserInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoResponseDtoNewLevelResponse>;

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserGetUsersForSearchBarGetRaw(requestParameters: ApiUserGetUsersForSearchBarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchBarUserDetailDtoListNewLevelResponse>>;

    /**
     */
    apiUserGetUsersForSearchBarGet(requestParameters: ApiUserGetUsersForSearchBarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchBarUserDetailDtoListNewLevelResponse>;

    /**
     * 
     * @param {InviteMemberInput} [inviteMemberInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserInviteMemberBandPostRaw(requestParameters: ApiUserInviteMemberBandPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiUserInviteMemberBandPost(requestParameters: ApiUserInviteMemberBandPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserSkipIntroductionPatchRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiUserSkipIntroductionPatch(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} [email] 
     * @param {string} [nickname] 
     * @param {EActivityLocation} [activityLocation] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUpdateUserPutRaw(requestParameters: ApiUserUpdateUserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiUserUpdateUserPut(requestParameters: ApiUserUpdateUserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

    /**
     * 
     * @param {number} [position] 
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUploadAvatarImagePostRaw(requestParameters: ApiUserUploadAvatarImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>>;

    /**
     */
    apiUserUploadAvatarImagePost(requestParameters: ApiUserUploadAvatarImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse>;

    /**
     * 
     * @param {Blob} [file] 
     * @param {number} [position] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUploadBannerImagePostRaw(requestParameters: ApiUserUploadBannerImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>>;

    /**
     */
    apiUserUploadBannerImagePost(requestParameters: ApiUserUploadBannerImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async apiUserChangePasswordPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/ChangePassword`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserChangePasswordPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserChangePasswordPostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserDeleteDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/Delete`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserDeleteDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserDeleteDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserDeleteInviteMemberDeleteRaw(requestParameters: ApiUserDeleteInviteMemberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/DeleteInviteMember`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserDeleteInviteMemberDelete(requestParameters: ApiUserDeleteInviteMemberDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserDeleteInviteMemberDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetProfileGetRaw(requestParameters: ApiUserGetProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileInfoDtoNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/GetProfile`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileInfoDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetProfileGet(requestParameters: ApiUserGetProfileGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileInfoDtoNewLevelResponse> {
        const response = await this.apiUserGetProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetUserInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoResponseDtoNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/GetUserInfo`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoResponseDtoNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetUserInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoResponseDtoNewLevelResponse> {
        const response = await this.apiUserGetUserInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetUsersForSearchBarGetRaw(requestParameters: ApiUserGetUsersForSearchBarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchBarUserDetailDtoListNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/GetUsersForSearchBar`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchBarUserDetailDtoListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetUsersForSearchBarGet(requestParameters: ApiUserGetUsersForSearchBarGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchBarUserDetailDtoListNewLevelResponse> {
        const response = await this.apiUserGetUsersForSearchBarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserInviteMemberBandPostRaw(requestParameters: ApiUserInviteMemberBandPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/InviteMemberBand`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteMemberInputToJSON(requestParameters['inviteMemberInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserInviteMemberBandPost(requestParameters: ApiUserInviteMemberBandPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserInviteMemberBandPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSkipIntroductionPatchRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/User/SkipIntroduction`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserSkipIntroductionPatch(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserSkipIntroductionPatchRaw(initOverrides);
    }

    /**
     */
    async apiUserUpdateUserPutRaw(requestParameters: ApiUserUpdateUserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['Email'] = requestParameters['email'];
        }

        if (requestParameters['nickname'] != null) {
            queryParameters['Nickname'] = requestParameters['nickname'];
        }

        if (requestParameters['activityLocation'] != null) {
            queryParameters['ActivityLocation'] = requestParameters['activityLocation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }


        let urlPath = `/api/User/UpdateUser`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUpdateUserPut(requestParameters: ApiUserUpdateUserPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiUserUpdateUserPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUploadAvatarImagePostRaw(requestParameters: ApiUserUploadAvatarImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['position'] != null) {
            queryParameters['Position'] = requestParameters['position'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }


        let urlPath = `/api/User/UploadAvatarImage`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUploadAvatarImagePost(requestParameters: ApiUserUploadAvatarImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiUserUploadAvatarImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUploadBannerImagePostRaw(requestParameters: ApiUserUploadBannerImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('File', requestParameters['file'] as any);
        }

        if (requestParameters['position'] != null) {
            formParams.append('Position', requestParameters['position'] as any);
        }


        let urlPath = `/api/User/UploadBannerImage`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUploadBannerImagePost(requestParameters: ApiUserUploadBannerImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringNewLevelResponse> {
        const response = await this.apiUserUploadBannerImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
