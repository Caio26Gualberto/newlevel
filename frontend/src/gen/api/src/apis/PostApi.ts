/* tslint:disable */
/* eslint-disable */
/**
 * NewLevel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanNewLevelResponse,
  Pagination,
  PostDtoGenericListNewLevelResponse,
} from '../models/index';
import {
    BooleanNewLevelResponseFromJSON,
    BooleanNewLevelResponseToJSON,
    PaginationFromJSON,
    PaginationToJSON,
    PostDtoGenericListNewLevelResponseFromJSON,
    PostDtoGenericListNewLevelResponseToJSON,
} from '../models/index';

export interface ApiPostGetRequest {
    pagination?: Pagination;
}

export interface ApiPostPostRequest {
    text?: string;
    photos?: Array<Blob>;
    videos?: Array<Blob>;
}

/**
 * PostApi - interface
 * 
 * @export
 * @interface PostApiInterface
 */
export interface PostApiInterface {
    /**
     * 
     * @param {Pagination} [pagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    apiPostGetRaw(requestParameters: ApiPostGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDtoGenericListNewLevelResponse>>;

    /**
     */
    apiPostGet(requestParameters: ApiPostGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDtoGenericListNewLevelResponse>;

    /**
     * 
     * @param {string} [text] 
     * @param {Array<Blob>} [photos] 
     * @param {Array<Blob>} [videos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    apiPostPostRaw(requestParameters: ApiPostPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>>;

    /**
     */
    apiPostPost(requestParameters: ApiPostPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse>;

}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI implements PostApiInterface {

    /**
     */
    async apiPostGetRaw(requestParameters: ApiPostGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDtoGenericListNewLevelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/Post`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationToJSON(requestParameters['pagination']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDtoGenericListNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostGet(requestParameters: ApiPostGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDtoGenericListNewLevelResponse> {
        const response = await this.apiPostGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostPostRaw(requestParameters: ApiPostPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNewLevelResponse>> {
        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['Text'] = requestParameters['text'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['photos'] != null) {
            requestParameters['photos'].forEach((element) => {
                formParams.append('Photos', element as any);
            })
        }

        if (requestParameters['videos'] != null) {
            requestParameters['videos'].forEach((element) => {
                formParams.append('Videos', element as any);
            })
        }


        let urlPath = `/api/Post`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNewLevelResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPostPost(requestParameters: ApiPostPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNewLevelResponse> {
        const response = await this.apiPostPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
